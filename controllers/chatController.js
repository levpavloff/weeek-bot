const Chat = require('../models/chatModel');
const Session = require('../models/sessionModel');
const Admin = require('../models/adminModel');
const projectService = require('../services/projectService');
const boardService = require('../services/boardService');
const { Markup } = require('telegraf');
const axios = require('axios');

const adminTelegramId = process.env.ADMIN;
const botToken = process.env.BOT_TOKEN;

// *** –†–ê–ë–û–¢–ê –° –°–ï–°–°–ò–ï–ô ***



// C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ó–∞–≤–æ–¥–∏–º –≤ –±–∞–∑—É –ë–î –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —á–∞—Ç
async function saveSession(userId, updateId, groupId, messageId) {
    try {
        let session = await Session.findOne({chat_id:userId});
        if(!session) {
            session = new Session({chat_id:userId, update_id:updateId, message_id: messageId, last_group: groupId})
        await session.save();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
}

// –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ ID —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–∞
// –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –ë–î –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
async function getSession(userId) {
    try {
        const session = await Session.findOne({ chat_id: userId });
        if (session) {
            return session;
        } else {
            return null;

        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ chat_id –ø–æ update_id:', error);
        return null;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–∞
// –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞
async function removeSession(userId){
    try {
        const session = await Session.findOne({ chat_id: userId });
        if (session) {
            await Session.findOneAndDelete({ chat_id: userId });
            return true
        } else {
            return null;

        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ chat_id:', error);
        return null;
    }
}

// *** –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–û–í –ò –î–û–°–¢–£–ü–û–í ***

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
const checkAdmin = async (ctx) => {
    const userId = ctx.message.from.id;
    try {
        const admin = await Admin.findOne({ admins_id: userId });
        if (admin && admin.admins_id.includes(userId)) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
            return true;
        } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ (–ø—Ä–∞–≤–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏)
const checkAccess = async (ctx) => {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;
    try {
        const admins = await ctx.telegram.getChatAdministrators(chatId);
        const adminsId = admins.map(admin => {
            return admin.user.id;
        })
        if(adminsId.includes(userId))  {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.`);
            return true
        } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.`);
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:', error);
        return false;
    }
}



// *** –†–ê–ë–û–¢–ê –° –ü–†–û–ï–ö–¢–û–ú ***
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
const addChat = async (ctx) => {
    const userId = ctx.message.from.id;
    const chatId = ctx.chat.id;
    const messageId = ctx.message.message_id;
    const updateId = ctx.update.update_id; // –ü–æ–ª—É—á–∞–µ–º update_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å update_id
        await saveSession(userId,updateId, chatId, messageId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é saveUpdateId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è update_id
        const projects = await projectService.getProjects();
        if (projects.length === 0) {
            await ctx.telegram.sendMessage(userId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
            return;
        }
        const buttons = projects.map((project) => {
            const callbackData = `project_${project.id}:${project.name}`;
            return Markup.button.callback(project.name, callbackData);
        });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏—é columns –≤ 2 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
        const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 });

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
        await ctx.telegram.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:', keyboard);

    } catch (error) {
        console.error(error);
        await ctx.telegram.sendMessage(adminTelegramId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.');
    }
};


// –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
const getDetails = async(ctx, projectId) => {
    try {
        let chat = await Chat.findOne({ "project.id": projectId });
        if(!chat) {
            console.log('–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞—à–ª–∏ –µ–≥–æ –ø–æ ID')
        }

        let boardsRaw = await boardService.getBoards(projectId);
        chat.project.boards = boardsRaw.map(board => {
            return {id: board.id, name: board.name}
        });
        chat.save();

    } catch (error) {
        console.error(error);
        await ctx.telegram.sendMessage(adminTelegramId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.');
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —á–∞—Ç–µ
const updateChatProject = async (ctx, projectId, projectName) => {
    try {
        const userId = ctx.callbackQuery.from.id;
        const session = await getSession(userId);
        if(!session){
            console.log('–ù–µ –Ω–∞—à–ª–∏ —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
        }
        const groupChatId = session.last_group;

        const admins = await ctx.telegram.getChatAdministrators(groupChatId);
        const adminsId = admins.map(admin => {
            return admin.user.id;
        })

        let chat = await Chat.findOne({ 'project.id': projectId });
        if (!chat) {
            await Chat.findOneAndDelete({chat_id: groupChatId});
            // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            chat = new Chat({ chat_id: groupChatId, 'project.id': projectId, 'project.name': projectName, 'users': adminsId });
            await chat.save();

        } else {
           chat = await Chat.updateOne({ 'project.id': projectId }, { $set: {chat_id: groupChatId, 'project.name': projectName, 'users': adminsId  } });
        }
        console.log('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.');

        await getDetails(ctx, projectId);
        await removeSession(userId);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä–µ–ø

        function encodeYourData(data) {
            return Buffer.from(data, 'utf-8').toString('base64');
        }
        const encodedData = encodeYourData(`{"chat_id":"${groupChatId}"}`);
        const startMessage = await ctx.telegram.sendMessage(groupChatId, `<b>–ü—Ä–æ–µ–∫—Ç ${projectName} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.</b> \n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –û –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –Ω–∞—à–∏—Ö –ø—Ä–æ–¥–∂–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º –∂–µ –ø—Ä–æ–µ–∫—Ç–µ. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —è –≤—ã–≤–µ–ª –∫–Ω–æ–ø–∫–µ –≤ –∑–∞–∫—Ä–µ–ø üëÜ</i>`, {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ',
                        url: `https://t.me/humans_projectbot/humans_projects?startapp=${encodedData}`
                    }
                ]]
            },  parse_mode: 'HTML'
        });

        await ctx.telegram.pinChatMessage(groupChatId, startMessage.message_id);

    } catch (error) {
        console.error(error);
        console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
async function sendResMsg(project, data) {
    try{
        const chat = await Chat.findOne({'project.id': project});
        if(!chat) {
            return false;
        }
        const groupId = chat.chat_id;
        const taskId = data.id;
        const taskName = data.title;
        const text = `–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Ññ${taskId}!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${taskName}`;
        await sendMessageToTelegram(groupId, text);
    } catch (err) {
        console.log(err);
    }

}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
async function sendMessageToTelegram(chatId, text) {
    try {
        const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const response = await axios.post(apiUrl, {
            chat_id: chatId,
            text: text,
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}






module.exports = {
    addChat,
    updateChatProject,
    checkAdmin,
    getDetails,
    checkAccess,
    sendResMsg,
};
